name: Release DXT

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag name to publish (e.g., v0.1.1)'
        required: true
      ref:
        description: 'Git ref to build from (branch or tag)'
        required: false
        default: 'master'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-attach-dxt:
    runs-on: ubuntu-latest
    env:
      # Provide a dummy token for build-time env validation.
      # If you add a real secret YNAB token, it will override this when set at step-level.
      YNAB_ACCESS_TOKEN: ci-build-token-1234567890
      SKIP_ENV_VALIDATION: true
    steps:
      - name: Checkout (default ref)
        uses: actions/checkout@v4

      - name: Checkout (specified ref)
        if: ${{ inputs.ref != '' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies (no scripts)
        run: npm ci --ignore-scripts

      - name: Set build environment
        run: echo "YNAB_ACCESS_TOKEN=${YNAB_ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Build (format + lint + bundle)
        run: npm run build:prod
        env:
          # Prefer secret if configured; otherwise use the job-level default above
          YNAB_ACCESS_TOKEN: ${{ secrets.YNAB_ACCESS_TOKEN || env.YNAB_ACCESS_TOKEN }}
          SKIP_ENV_VALIDATION: true

      - name: Install DXT CLI
        run: npm i -g @anthropic-ai/dxt

      - name: Validate manifest
        run: dxt validate manifest.json

      - name: Compute package metadata
        id: meta
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          FILE="dist/${NAME}-${VERSION}.dxt"
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "file=$FILE" >> $GITHUB_OUTPUT

      - name: Pack DXT
        run: dxt pack . "${{ steps.meta.outputs.file }}"

      - name: Upload or create release with asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.release_tag || github.ref_name }}
          name: ${{ inputs.release_tag || github.ref_name }}
          files: ${{ steps.meta.outputs.file }}
          generate_release_notes: true
          fail_on_unmatched_files: true
