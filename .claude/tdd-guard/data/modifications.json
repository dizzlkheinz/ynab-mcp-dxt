{
  "session_id": "ce98baf2-04a4-494a-84cd-24e9f58116f8",
  "transcript_path": "C:\\Users\\ksutk\\.claude\\projects\\C--Users-ksutk-projects-ynab-mcp-dxt\\ce98baf2-04a4-494a-84cd-24e9f58116f8.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "C:\\Users\\ksutk\\projects\\ynab-mcp-dxt\\src\\tools\\exportTransactions.ts",
    "content": "import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';\nimport * as ynab from 'ynab';\nimport { z } from 'zod';\nimport { withToolErrorHandling } from '../types/index.js';\nimport { responseFormatter } from '../server/responseFormatter.js';\nimport { writeFileSync } from 'fs';\nimport { format } from 'date-fns';\n\n/**\n * Schema for ynab:export_transactions tool parameters\n */\nexport const ExportTransactionsSchema = z.object({\n  budget_id: z.string().min(1, 'Budget ID is required'),\n  account_id: z.string().optional(),\n  category_id: z.string().optional(),\n  since_date: z\n    .string()\n    .regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Date must be in ISO format (YYYY-MM-DD)')\n    .optional(),\n  type: z.enum(['uncategorized', 'unapproved']).optional(),\n  filename: z.string().optional(),\n});\n\nexport type ExportTransactionsParams = z.infer<typeof ExportTransactionsSchema>;\n\n/**\n * Generate a descriptive filename for transaction export\n */\nfunction generateExportFilename(params: ExportTransactionsParams, transactionCount: number): string {\n  if (params.filename) {\n    return params.filename.endsWith('.json') ? params.filename : `${params.filename}.json`;\n  }\n\n  const timestamp = format(new Date(), 'yyyy-MM-dd_HH-mm-ss');\n  let description = 'transactions';\n  \n  // Add filters to filename for clarity\n  const filters = [];\n  \n  if (params.since_date) {\n    filters.push(`since_${params.since_date}`);\n  }\n  \n  if (params.account_id) {\n    filters.push(`account_${params.account_id.substring(0, 8)}`);\n  }\n  \n  if (params.category_id) {\n    filters.push(`category_${params.category_id.substring(0, 8)}`);\n  }\n  \n  if (params.type) {\n    filters.push(params.type);\n  }\n\n  if (filters.length > 0) {\n    description = filters.join('_');\n  }\n\n  return `ynab_${description}_${transactionCount}items_${timestamp}.json`;\n}\n\n/**\n * Handles the ynab:export_transactions tool call\n * Exports all transactions to a JSON file with descriptive filename\n */\nexport async function handleExportTransactions(\n  ynabAPI: ynab.API,\n  params: ExportTransactionsParams,\n): Promise<CallToolResult> {\n  return await withToolErrorHandling(\n    async () => {\n      let response;\n\n      // Use conditional API calls based on filter parameters\n      if (params.account_id) {\n        response = await ynabAPI.transactions.getTransactionsByAccount(\n          params.budget_id,\n          params.account_id,\n          params.since_date,\n        );\n      } else if (params.category_id) {\n        response = await ynabAPI.transactions.getTransactionsByCategory(\n          params.budget_id,\n          params.category_id,\n          params.since_date,\n        );\n      } else {\n        response = await ynabAPI.transactions.getTransactions(\n          params.budget_id,\n          params.since_date,\n          params.type,\n        );\n      }\n\n      const transactions = response.data.transactions;\n      \n      // Generate descriptive filename\n      const filename = generateExportFilename(params, transactions.length);\n      \n      // Prepare transaction data for export\n      const exportData = {\n        export_info: {\n          exported_at: new Date().toISOString(),\n          total_transactions: transactions.length,\n          filters: {\n            budget_id: params.budget_id,\n            account_id: params.account_id || null,\n            category_id: params.category_id || null,\n            since_date: params.since_date || null,\n            type: params.type || null,\n          },\n        },\n        transactions: transactions.map((transaction) => ({\n          id: transaction.id,\n          date: transaction.date,\n          amount: transaction.amount,\n          memo: transaction.memo,\n          cleared: transaction.cleared,\n          approved: transaction.approved,\n          flag_color: transaction.flag_color,\n          account_id: transaction.account_id,\n          payee_id: transaction.payee_id,\n          category_id: transaction.category_id,\n          transfer_account_id: transaction.transfer_account_id,\n          transfer_transaction_id: transaction.transfer_transaction_id,\n          matched_transaction_id: transaction.matched_transaction_id,\n          import_id: transaction.import_id,\n          deleted: transaction.deleted,\n          account_name: transaction.account_name,\n          payee_name: transaction.payee_name,\n          category_name: transaction.category_name,\n        })),\n      };\n\n      // Write to file\n      writeFileSync(filename, JSON.stringify(exportData, null, 2), 'utf-8');\n\n      // Return first few transactions as preview\n      const previewCount = Math.min(10, transactions.length);\n      const preview = transactions.slice(0, previewCount);\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: responseFormatter.format({\n              message: `Successfully exported ${transactions.length} transactions`,\n              filename: filename,\n              preview_count: previewCount,\n              total_count: transactions.length,\n              preview_transactions: preview.map((transaction) => ({\n                id: transaction.id,\n                date: transaction.date,\n                amount: transaction.amount,\n                memo: transaction.memo,\n                payee_name: transaction.payee_name,\n                category_name: transaction.category_name,\n              })),\n            }),\n          },\n        ],\n      };\n    },\n    'ynab:export_transactions',\n    'exporting transactions',\n  );\n}"
  }
}
